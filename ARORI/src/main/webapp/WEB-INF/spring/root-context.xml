<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		Filter
	 -->
	<bean id="testFilter" class="com.kh.arori.filter.TestFilter"></bean>
	
	<!-- 
		Properties 를 불러오는 설정
		${이름}
	 -->	
	<context:property-placeholder location="classpath:/property/*.properties"/>
	
	<!--Task > 스케쥴러 사용 설정-->
	<task:annotation-driven/>
	<context:component-scan base-package="com.kh.arori" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	</context:component-scan>
	
	<!-- Transaction Annotation 및 도구 등록 -->
	<!-- 등록 도구 > org.springframework.jdbc.datasource.DataSourceTransactionManager -->
	<tx:annotation-driven/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dbcpSource"></property>
	</bean>
	
	<!-- AOP 설정 -->
	<aop:aspectj-autoproxy/>
		
	<!-- 데이터베이스 도구를 등록 -->
	<!--
		 - 연결 도구 :  
		 	org.springframework.jdbc.datasource.DriverManagerDataSource
		 	org.apache.commons.dbcp2.BasicDataSource
		 - 명령 도구
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	
	
	<bean id="dbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		
		<property name="maxTotal" value="${db.maxTotal}"></property>
		<property name="maxIdle" value="${db.maxIdle}"></property>
		<property name="maxWaitMillis" value="${db.maxWaitMillis}"></property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--
	 myBatis를 이용하기 위한 도구 등록
		-sqlSessionTemplate :  구문 실행을 위한 템플릿을 제공하는 도구(양식)
		-sqlSession : 실제로 SQL 구문을 실행시키는 도구 
	 -->
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- 연결을 위한 도구를 참조 설정 -->
	 	<property name="dataSource" ref="dbcpSource"></property>
	 	<!-- myBatis 설정파일의 위치를 설정 -->
	 	<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
	 	<!-- 실제 실행할 명령 파일 위치를 설정  -->
	 	<property name="mapperLocations" value="classpath:/mybatis/**/*-mapper.xml"></property>	 	
	</bean>
	 	
	  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	  	<!-- myBatis 실행 도구에 대한 참조 설정 -->
	  	<constructor-arg index="0" ref="sqlSession"></constructor-arg>
	</bean>	
	
	 <!-- 
    	단방향 암호화 중에서 BCrypt 라는 방식을 쓸 수 있도록 해주는 도구
     -->
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<!-- Email 설정 의존성 추가 -->
	<bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.host}"></property>
		<property name="port" value="${email.port}"></property>
		<property name="username" value="${email.username}"></property>
		<property name="password" value="${email.password}"></property>
		
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	
	<mvc:annotation-driven>
    	<mvc:message-converters>
	        <!-- @ResponseBody로 String 처리할때 한글처리 -->
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
	            <property name="supportedMediaTypes">
	                <list>
	                    <value>text/html;charset=UTF-8</value>
	                </list>
	            </property>
	        </bean>
	    </mvc:message-converters>
	</mvc:annotation-driven>
</beans>
